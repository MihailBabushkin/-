import random
import asyncio
import aiosqlite
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command 
from aiogram.filters.state import StateFilter  
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ChatType
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from typing import Callable, Awaitable, Dict, Any
from aiogram.types import ReplyKeyboardRemove
from PIL import Image, ImageDraw, ImageFont
import os
from aiogram.types import Message
from datetime import datetime, timedelta

last_used = {} #—Å–ª–æ–≤–∞—Ä—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (—Å–º –≤ –ø–æ–∫–∞–∑ –ø–∞—Å–ø–æ—Ä—Ç–∞)

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä 12-–∑–Ω–∞—á–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Å—á–µ—Ç–∞
def generate_account_number():
    return str(random.randint(10**11, 10**12 - 1))  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ –æ—Ç 100000000000 –¥–æ 999999999999


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "7989088801:AAEviiVC1DQ8XFFNNcrMozFAMENEdavyiGw"
ADMIN_ID = 6313754974

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# Middleware-—Ñ–∏–ª—å—Ç—Ä, —Ä–∞–∑—Ä–µ—à–∞—é—â–∏–π –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –≤ –õ–° (–∫—Ä–æ–º–µ /deportation)
class PrivateCommandMiddleware(BaseMiddleware):
    async def __call__(
            self,
            handler: Callable[[types.Message, Dict[str, Any]], Awaitable[Any]],
            event: types.Message,
            data: Dict[str, Any]
    ) -> Any:
        if event.text and (event.text.startswith("/deportation") or
                           event.text.startswith("/clear_buttons") or
                           event.text.startswith("/my_passport")):
            return await handler(event, data)
        if event.chat.type != ChatType.PRIVATE and event.text and event.text.startswith("/"):
            return  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –≤–Ω–µ –õ–°
        return await handler(event, data)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware
dp.message.middleware(PrivateCommandMiddleware())

#FSM –∫–ª–∞—Å—Å—ã
class Marriage(StatesGroup):
    enter_spouse_account = State()

class Settings(StatesGroup):
    waiting_for_new_name = State()

class Broadcast(StatesGroup):
    waiting_for_message = State()
    confirm = State()

class SetBalance(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_balance = State()

class Register(StatesGroup):
    name = State()
    gender = State()
    city = State()

class Transfer(StatesGroup):
    enter_recipient = State()
    enter_amount = State()
    confirm = State()

class Divorce(StatesGroup):
    confirm = State()

class ChangeCity(StatesGroup):
    choose_city = State()
    enter_custom_city = State()

class Appointment(StatesGroup):
    choose_doctor = State()
    choose_time = State()

class Statement(StatesGroup):
    enter_text = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
async def init_db():
    async with aiosqlite.connect("database.db") as db:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users
        await db.execute("""
        CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    account_id TEXT UNIQUE NOT NULL,
    name TEXT NOT NULL,
    gender TEXT NOT NULL,
    city TEXT NOT NULL,
    balance INTEGER DEFAULT 1,
    spouse_id TEXT,
    registration_date DATETIME DEFAULT CURRENT_TIMESTAMP)
        """)

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É transfers
        await db.execute("""
        CREATE TABLE IF NOT EXISTS transfers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            from_user TEXT NOT NULL,           -- –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å (–Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞)
            to_user TEXT NOT NULL,             -- –ü–æ–ª—É—á–∞—Ç–µ–ª—å (–Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞)
            amount INTEGER NOT NULL,           -- –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
            commission INTEGER DEFAULT 0,      -- –ö–æ–º–∏—Å—Å–∏—è
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP -- –í—Ä–µ–º—è –ø–µ—Ä–µ–≤–æ–¥–∞
        )
        """)

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É statements
        await db.execute("""
        CREATE TABLE IF NOT EXISTS statements (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,          -- ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            text TEXT NOT NULL,                -- –¢–µ–∫—Å—Ç –∑–∞—è–≤–ª–µ–Ω–∏—è
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP -- –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏
        )
        """)

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É appointments
        await db.execute("""
        CREATE TABLE IF NOT EXISTS appointments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,          -- ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            doctor TEXT NOT NULL,              -- –í—Ä–∞—á
            time TEXT NOT NULL,                -- –í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP -- –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏
        )
        """)

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É broadcasts
        await db.execute("""
        CREATE TABLE IF NOT EXISTS broadcasts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            admin_id INTEGER NOT NULL,        -- ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            message TEXT NOT NULL,             -- –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP, -- –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏
            success_count INTEGER DEFAULT 0,   -- –£—Å–ø–µ—à–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            fail_count INTEGER DEFAULT 0       -- –ù–µ—É–¥–∞—á–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        )
        """)

        await db.commit()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu_kb(spouse_exists: bool):
    buttons = [
        [KeyboardButton(text="üí∞ –ù–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥")],
        [KeyboardButton(text="üßë‚Äç‚öï –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫–æ –≤—Ä–∞—á—É")],
        [KeyboardButton(text="üìù –ù–∞–ø–∏—Å–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ")],
        [KeyboardButton(text="üìÇ –ò—Å—Ç–æ—Ä–∏–∏")],
        [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")],
    ]
    if spouse_exists:
        buttons.append([KeyboardButton(text="üíî –†–∞–∑–≤–µ—Å—Ç–∏—Å—å")])
    else:
        buttons.append([KeyboardButton(text="üíç –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞–∫")])
    buttons.append([KeyboardButton(text="üè† –ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏
def history_menu_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤")],
            [KeyboardButton(text="üìÑ –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–ª–µ–Ω–∏–π")],
            [KeyboardButton(text="üßë‚Äç‚öï –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π –∫–æ –≤—Ä–∞—á—É")],
            [KeyboardButton(text="‚Ü© –ù–∞–∑–∞–¥")],
        ],
        resize_keyboard=True
    )


def confirm_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), KeyboardButton(text="–û—Ç–º–µ–Ω–∞")],
        ], resize_keyboard=True
    )

def doctors_kb():
    buttons = [
        [KeyboardButton(text="(—É–±–æ—Ä—â–∏–∫) –ö–∞–Ω–¥–∏–¥–∞—Ç –∏–Ω—Ü–µ–ª—å—Å–∫–∏—Ö –Ω–∞—É–∫ –∏ –∏–Ω—Ü–µ–ª–æ—Ñ–∏–ª—å—Å—Ç–≤–æ–≤–µ–¥—Å—Ç–≤–∞ –†–æ–¥–∏–æ–Ω –°–µ—Ä–≥–µ–µ–≤–∏—á –ü–∏–¥–æ—Ä–∞—Å–æ–≤–∏—á")],
        [KeyboardButton(text="(–∑—É–±–Ω–æ–π) –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á")],
        [KeyboardButton(text="(–í–µ–Ω–µ—Ä–æ–ª–æ–≥) –õ–æ–±–∞–Ω–æ–≤ –ò–ª—å—è –ü–∏—Ç—Ä—é—Ö–æ–Ω–æ–≤–∏—á")],
        [KeyboardButton(text="(–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥) –í–∞–≥–∏–Ω–æ–≤ –ê–Ω–¥—Ä–µ–π –ú–∏—Ö–∞–π–ª–æ–≤–∏—á")],
        [KeyboardButton(text="(–£—Ä–æ–ª–æ–≥) –ü–∏—Å—Ç—Ä–æ—Ö—É–Ω—å–µ–≤ –ï–≤–≥–µ–Ω–∏–π –ê—Ä—Ç—ë–º–æ–≤–∏—á")],
        [KeyboardButton(text="(–ì–∏–Ω–µ–∫–æ–ª–æ–≥–∏—á–∫–∞) –®–ª—é—Ö–æ–≤–∞ –ù–∞—Ç–∞–ª—å—è –ò–≤–∞–Ω–æ–≤–Ω–∞")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=True)

def times_kb():
    buttons = [
        [KeyboardButton(text="10:00")],
        [KeyboardButton(text="10:30")],
        [KeyboardButton(text="11:00")],
        [KeyboardButton(text="11:30")],
        [KeyboardButton(text="12:00")],
        [KeyboardButton(text="12:30")],
        [KeyboardButton(text="13:00")],
        [KeyboardButton(text="13:30")],
        [KeyboardButton(text="15:00")],
        [KeyboardButton(text="15:30")],
        [KeyboardButton(text="16:00")],
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≥–æ—Ä–æ–¥–∞–º–∏
def cities_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='–§–ì–†. –®—É—è')],
            [KeyboardButton(text='–§–ì–†. –®—É–π—Å–∫–∞—è –ü–µ—Ç—Ä–æ–Ω–µ–∑–∏—è')],
            [KeyboardButton(text='–ù–∏–∂–Ω–∏–π –ë–ª–∞–∂')],
            [KeyboardButton(text='–§–ì–†. –ê—Ä–∫—Ö–µ–º')],
            [KeyboardButton(text='–§–ì–†. –°–∞–±—Ä–∏–µ')],
            [KeyboardButton(text='–§–ì–†. –õ–æ—Å—Ç-–ü–∞—Ä–∞–¥–∞–π–∑')],
            [KeyboardButton(text='–ë–æ–ª–≤–∞–Ω–∏—è')]
        ],
        resize_keyboard=True
    )
# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def show_full_profile_menu(message: types.Message, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    async with aiosqlite.connect("database.db") as db:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
        cursor = await db.execute("""
            SELECT 
                name, gender, city, balance, id as account_id,
                spouse_id, (SELECT name FROM users WHERE id = u.spouse_id) as spouse_name
            FROM users u
            WHERE user_id = ?
        """, (user_id,))
        user_data = await cursor.fetchone()

    if not user_data:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        return

    name, gender, city, balance, account_id, spouse_id, spouse_name = user_data

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
    profile_message = (
        f"üìï <b>–ü–∞—Å–ø–æ—Ä—Ç {name}</b>\n\n"
        f"üíõ‚îú üÜî <b>–ì–æ—Å ID:</b> <code>{account_id}</code>\n"
        f"üíõ‚îú üë§ <b>–ò–º—è:</b> <code>{name}</code>\n"
        f"ü§ç‚îú üë´ <b>–ü–æ–ª:</b> <code>{'–ú—É–∂—Å–∫–æ–π' if gender == '–º' else '–ñ–µ–Ω—Å–∫–∏–π'}</code>\n"
        f"ü§ç‚îú üíç <b>–°—É–ø—Ä—É–≥(–∞):</b> <code>{spouse_name if spouse_name else '–ù–µ—Ç'}</code>\n"
        f"üíô‚îú üèô <b>–ì–æ—Ä–æ–¥:</b> <code>{city}</code>\n"
        f"üíô‚îî üí≥ <b>–ë–∞–ª–∞–Ω—Å:</b> <code>{balance}</code> —à—É–µ–∫\n"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
    await message.answer(profile_message, parse_mode="HTML")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_kb(spouse_exists=bool(spouse_id)))

# –ö–æ–º–∞–Ω–¥–∞ /clear_buttons (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–µ –≤ –õ–°)
@dp.message(Command("clear_buttons"))
async def clear_buttons_handler(message: types.Message):
    if message.chat.type != ChatType.PRIVATE:
        await message.answer(
            "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–±—Ä–∞–Ω–∞.",
            reply_markup=ReplyKeyboardRemove()        )
    else:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ /clear_buttons —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤–Ω–µ –õ–°.")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ —Å—á–µ—Ç–∞
async def is_account_unique(account_number: str, db: aiosqlite.Connection) -> bool:
    cursor = await db.execute(
        "SELECT 1 FROM users WHERE account_id = ? LIMIT 1",
        (account_number,)
    )
    return await cursor.fetchone() is None

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Å—á–µ—Ç–∞
async def generate_account_number(db: aiosqlite.Connection) -> str:
    while True:
        account_number = str(random.randint(10**11, 10**12 - 1))
        if await is_account_unique(account_number, db):
            return account_number

#—Å—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    try:
        async with aiosqlite.connect("database.db") as db:
            cursor = await db.execute(
                "SELECT 1 FROM users WHERE user_id = ?",
                (user_id,)
            )
            is_registered = await cursor.fetchone()

        if is_registered:
            await show_full_profile_menu(message, user_id)
        else:
            await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
            await state.set_state(Register.name)

    except Exception as e:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@dp.message(Register.name)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if not name or len(name) > 50:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è (–º–∞–∫—Å. 50 —Å–∏–º–≤–æ–ª–æ–≤)")
        return

    await state.update_data(name=name)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª (–º/–∂):")
    await state.set_state(Register.gender)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–ª–∞
@dp.message(Register.gender)
async def process_gender(message: types.Message, state: FSMContext):
    gender = message.text.strip().lower()
    if gender not in ['–º', '–∂']:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ '–º' –∏–ª–∏ '–∂'")
        return

    await state.update_data(gender=gender)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:", reply_markup=cities_kb())
    await state.set_state(Register.city)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.message(Register.city)
async def process_city(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    city = message.text.strip()
    valid_cities = [
        '–§–ì–†. –®—É—è', '–§–ì–†. –®—É–π—Å–∫–∞—è –ü–µ—Ç—Ä–æ–Ω–µ–∑–∏—è', '–ù–∏–∂–Ω–∏–π –ë–ª–∞–∂',
        '–§–ì–†. –ê—Ä–∫—Ö–µ–º', '–§–ì–†. –°–∞–±—Ä–∏–µ', '–§–ì–†. –õ–æ—Å—Ç-–ü–∞—Ä–∞–¥–∞–π–∑', '–ë–æ–ª–≤–∞–Ω–∏—è'
    ]

    if city not in valid_cities:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞")
        return

    user_id = message.from_user.id
    data = await state.get_data()

    async with aiosqlite.connect("database.db") as db:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞
        account_number = await generate_account_number(db)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.execute(
            """
            INSERT INTO users 
            (user_id, account_id, name, gender, city, balance) 
            VALUES (?, ?, ?, ?, ?, 1)
            """,
            (user_id, account_number, data['name'], data['gender'], city)
        )
        await db.commit()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    response = (
        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        "üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"‚îú –ò–º—è: {data['name']}\n"
        f"‚îú –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if data['gender'] == '–º' else '–ñ–µ–Ω—Å–∫–∏–π'}\n"
        f"‚îú –ì–æ—Ä–æ–¥: {city}\n"
        f"‚îú Telegram ID: {user_id}\n"
        f"‚îî –ù–æ–º–µ—Ä —Å—á–µ—Ç–∞: {account_number}\n\n"
        "üí≥ –ù–∞ –≤–∞—à —Å—á–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω 1 —à—É–µ–∫ –≤ –ø–æ–¥–∞—Ä–æ–∫!"
    )

    await message.answer(response, reply_markup=ReplyKeyboardRemove())
    await show_main_menu(message, user_id)
    await state.clear()


# –ù–∞–ø–∏—Å–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ
@dp.message(F.text == "üìù –ù–∞–ø–∏—Å–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ")
async def write_statement(message: types.Message, state: FSMContext):
    await state.set_state(Statement.enter_text)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞—è–≤–ª–µ–Ω–∏—è:")

@dp.message(Statement.enter_text)
async def save_statement(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if not text:
        await message.answer("–¢–µ–∫—Å—Ç –∑–∞—è–≤–ª–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞.")
        return
    user_id = message.from_user.id
    async with aiosqlite.connect("database.db") as db:
        await db.execute(
            "INSERT INTO statements (user_id, text) VALUES (?, ?)",
            (user_id, text)
        )
        await db.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Å –∑–∞—è–≤–ª–µ–Ω–∏–µ–º –∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    admin_message = (
        f"–ù–æ–≤–æ–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n\n{text}"
    )
    await bot.send_message(ADMIN_ID, admin_message)

    await message.answer("–í–∞—à–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ!")
    await show_main_menu(message, user_id)
    await state.clear()

# –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫–æ –≤—Ä–∞—á—É
@dp.message(F.text == "üßë‚Äç‚öï –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫–æ –≤—Ä–∞—á—É")
async def start_appointment(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞:", reply_markup=doctors_kb())
    await state.set_state(Appointment.choose_doctor)

@dp.message(Appointment.choose_doctor)
async def choose_time(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await show_main_menu(message, message.from_user.id)
        await state.clear()
        return
    doctor = message.text.strip()
    await state.update_data(doctor=doctor)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=times_kb())
    await state.set_state(Appointment.choose_time)

@dp.message(Appointment.choose_time)
async def confirm_appointment(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await show_main_menu(message, message.from_user.id)
        await state.clear()
        return
    time = message.text.strip()
    data = await state.get_data()
    doctor = data.get("doctor")
    user_id = message.from_user.id
    async with aiosqlite.connect("database.db") as db:
        await db.execute("INSERT INTO appointments (user_id, doctor, time) VALUES (?, ?, ?)",
                         (user_id, doctor, time))
        await db.commit()
    await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –∫ {doctor} –Ω–∞ {time}.")
    await show_main_menu(message, user_id)
    await state.clear()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—Ä–∞–∫–∞
@dp.message(F.text == "üíç –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –±—Ä–∞–∫")
async def start_marriage(message: types.Message, state: FSMContext):
    await state.set_state(Marriage.enter_spouse_account)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ 12-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –±—Ä–∞–∫:")

@dp.message(Marriage.enter_spouse_account)
async def process_spouse_account(message: types.Message, state: FSMContext):
    spouse_account = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–æ–º–µ—Ä–∞ —Å—á–µ—Ç–∞
    if not (spouse_account.isdigit() and len(spouse_account) == 12):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Å—á–µ—Ç–∞. –í–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ 12 —Ü–∏—Ñ—Ä:")
        return

    user_id = message.from_user.id

    async with aiosqlite.connect("database.db") as db:
        # –ü–æ–ª—É—á–∞–µ–º account_id —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor = await db.execute(
            "SELECT account_id, name FROM users WHERE user_id = ?",
            (user_id,)
        )
        sender_data = await cursor.fetchone()

        if not sender_data:
            await message.answer("‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /start")
            await state.clear()
            return

        sender_account, sender_name = sender_data

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–µ–Ω–∏—Ç—å—Å—è –Ω–∞ —Å–µ–±–µ
        if spouse_account == sender_account:
            await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –±—Ä–∞–∫ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π")
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        cursor = await db.execute("""
            SELECT user_id, name, spouse_id 
            FROM users 
            WHERE account_id = ?""",
                                  (spouse_account,)
                                  )
        spouse_data = await cursor.fetchone()

        if not spouse_data:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return

        if spouse_data[2] is not None:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ spouse_id
            await message.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –±—Ä–∞–∫–µ")
            await state.clear()
            return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ state
    await state.update_data(
        spouse_account=spouse_account,
        spouse_user_id=spouse_data[0],
        spouse_name=spouse_data[1],
        sender_account=sender_account,
        sender_name=sender_name)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    try:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_marriage:{sender_account}"),
             InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_marriage:{sender_account}")]])
        await bot.send_message(
            spouse_data[0],  # user_id –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            f"üíç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {sender_name} (—Å—á–µ—Ç: {sender_account}) "
            f"—Ö–æ—á–µ—Ç –≤—Å—Ç—É–ø–∏—Ç—å —Å –≤–∞–º–∏ –≤ –±—Ä–∞–∫. –ü—Ä–∏–Ω—è—Ç—å?",
            reply_markup=kb)

        await message.answer(
            f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –±—Ä–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {spouse_data[1]} "
            f"(—Å—á–µ—Ç: {spouse_account}). –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    except Exception as e:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –±—Ä–∞–∫: {e}")
    await state.clear()


@dp.callback_query(F.data.startswith("accept_marriage:"))
async def accept_marriage(callback: types.CallbackQuery):
    sender_account = callback.data.split(":")[1]
    acceptor_id = callback.from_user.id

    async with aiosqlite.connect("database.db") as db:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor = await db.execute(
                "SELECT user_id, account_id, name FROM users WHERE account_id = ?",
                (sender_account,))
            sender_data = await cursor.fetchone()
            cursor = await db.execute(
                "SELECT account_id, name FROM users WHERE user_id = ?",
                (acceptor_id,))
            acceptor_data = await cursor.fetchone()
            if not sender_data or not acceptor_data:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±—Ä–∞–∫–µ
            await db.execute("BEGIN TRANSACTION")
            await db.execute(
                "UPDATE users SET spouse_id = ? WHERE account_id = ?",
                (acceptor_data[0], sender_account))

            await db.execute(
                "UPDATE users SET spouse_id = ? WHERE user_id = ?",
                (sender_account, acceptor_id))

            await db.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await bot.send_message(
                sender_data[0],
                f"üíï –í–∞—à –±—Ä–∞–∫ —Å {acceptor_data[1]} (—Å—á–µ—Ç: {acceptor_data[0]}) —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")

            await bot.send_message(
                acceptor_id,
                f"üíï –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –±—Ä–∞–∫ —Å {sender_data[2]} (—Å—á–µ—Ç: {sender_account}). –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!")

        except Exception as e:
            await db.rollback()
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±—Ä–∞–∫–∞")
            print(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±—Ä–∞–∫–∞: {e}")
        finally:
            await callback.message.delete()

@dp.callback_query(F.data.startswith("decline_marriage:"))
async def decline_marriage(callback: types.CallbackQuery):
    sender_account = callback.data.split(":")[1]
    async with aiosqlite.connect("database.db") as db:
        cursor = await db.execute(
            "SELECT user_id, name FROM users WHERE account_id = ?",
            (sender_account,))
        sender_data = await cursor.fetchone()
    if sender_data:
        await bot.send_message(
            sender_data[0],
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.full_name} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –±—Ä–∞–∫–µ")
    await callback.message.delete()
    await callback.answer("–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –±—Ä–∞–∫–µ")

@dp.message(F.text == "üíî –†–∞–∑–≤–µ—Å—Ç–∏—Å—å")
async def start_divorce(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    async with aiosqlite.connect("database.db") as db:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±—Ä–∞–∫–µ
        cursor = await db.execute("""
            SELECT u.spouse_id, s.name, s.account_id
            FROM users u
            LEFT JOIN users s ON u.spouse_id = s.account_id
            WHERE u.user_id = ?
            """, (user_id,))
        marriage_data = await cursor.fetchone()
        if not marriage_data or not marriage_data[0]:
            await message.answer("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ")
            await show_main_menu(message, user_id)
            return
    await state.update_data(
        spouse_account=marriage_data[0],
        spouse_name=marriage_data[1])
    await message.answer(
        f"‚ö†Ô∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–≤–µ—Å—Ç–∏—Å—å —Å {marriage_data[1]} (—Å—á–µ—Ç: {marriage_data[2]})?",
        reply_markup=confirm_kb())
    await state.set_state(Divorce.confirm)

@dp.message(Divorce.confirm, F.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def confirm_divorce(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    async with aiosqlite.connect("database.db") as db:
        try:
            await db.execute("BEGIN TRANSACTION")
            # –†–∞–∑–≤–æ–¥–∏–º –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await db.execute(
                "UPDATE users SET spouse_id = NULL WHERE account_id = ?",
                (data['spouse_account'],))

            await db.execute(
                "UPDATE users SET spouse_id = NULL WHERE user_id = ?",
                (user_id,))
            await db.commit()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –±—Ä–∞–∫–∞
            cursor = await db.execute(
                "SELECT user_id FROM users WHERE account_id = ?",
                (data['spouse_account'],))
            spouse_id = (await cursor.fetchone())[0]
            await bot.send_message(
                spouse_id,
                f"‚ùå {message.from_user.full_name} —Ä–∞—Å—Ç–æ—Ä–≥(–ª–∞) –±—Ä–∞–∫ —Å –≤–∞–º–∏")
            await message.answer(
                "‚úÖ –í—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ —Ä–∞–∑–≤–µ–¥–µ–Ω—ã.\n"
                f"–ë—Ä–∞–∫ —Å {data['spouse_name']} (—Å—á–µ—Ç: {data['spouse_account']}) —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç.")
        except Exception as e:
            await db.rollback()
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–∏ –±—Ä–∞–∫–∞")
            print(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–≤–æ–¥–∞: {e}")
        finally:
            await state.clear()
            await show_main_menu(message, user_id)

@dp.message(Divorce.confirm)
async def confirm_divorce(message: types.Message, state: FSMContext):
    if message.text.lower() == "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        user_id = message.from_user.id
        async with aiosqlite.connect("database.db") as db:
            cursor = await db.execute("SELECT spouse_id FROM users WHERE user_id = ?", (user_id,))
            user = await cursor.fetchone()
            if user is None or user[0] is None:
                await message.answer("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ.")
                await show_main_menu(message, user_id)
                await state.clear()
                return
            spouse_id = user[0]
            await db.execute("UPDATE users SET spouse_id = NULL WHERE user_id = ?", (user_id,))
            await db.execute("UPDATE users SET spouse_id = NULL WHERE user_id = ?", (spouse_id,))
            await db.commit()
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ–ª–∏—Å—å.")
        await show_main_menu(message, user_id)
        await state.clear()
    else:
        await message.answer("–†–∞–∑–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.")
        await show_main_menu(message, message.from_user.id)
        await state.clear()

# –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥
@dp.message(F.text == "üè† –ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞")
async def change_city_start(message: types.Message, state: FSMContext):
    keyboard = cities_kb()
    keyboard.keyboard.append([KeyboardButton(text="üèò–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥üèò")])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üèò–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥üèò':", reply_markup=keyboard)
    await state.set_state(ChangeCity.choose_city)

@dp.message(ChangeCity.choose_city)
async def change_city_chosen(message: types.Message, state: FSMContext):
    city = message.text.strip()
    if city == "üèò–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥üèò":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(ChangeCity.enter_custom_city)
        return

    allowed_cities = [
        '–§–ì–†. –®—É—è', '–§–ì–†. –®—É–π—Å–∫–∞—è –ü–µ—Ç—Ä–æ–Ω–µ–∑–∏—è','–ù–∏–∂–Ω–∏–π –ë–ª–∞–∂','–§–ì–†. –ê—Ä–∫—Ö–µ–º','–§–ì–†. –°–∞–±—Ä–∏–µ', '–§–ì–†. –õ–æ—Å—Ç-–ü–∞—Ä–∞–¥–∞–π–∑','–ë–æ–ª–≤–∞–Ω–∏—è'
    ]
    if city not in allowed_cities:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥'.")
        return

    user_id = message.from_user.id
    async with aiosqlite.connect("database.db") as db:
        await db.execute("UPDATE users SET city = ? WHERE user_id = ?", (city, user_id))
        await db.commit()
    await message.answer(f"–í–∞—à –≥–æ—Ä–æ–¥ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {city}.", reply_markup=ReplyKeyboardRemove())
    await show_main_menu(message, user_id)
    await state.clear()

@dp.message(ChangeCity.enter_custom_city)
async def change_city_custom_entered(message: types.Message, state: FSMContext):
    city = message.text.strip()
    if not city:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
        return

    user_id = message.from_user.id
    async with aiosqlite.connect("database.db") as db:
        await db.execute("UPDATE users SET city = ? WHERE user_id = ?", (city, user_id))
        await db.commit()
    await message.answer(f"–í–∞—à –≥–æ—Ä–æ–¥ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {city}.", reply_markup=ReplyKeyboardRemove())
    await show_main_menu(message, user_id)
    await state.clear()

#—Å–º–µ–Ω–∞ –∏–º–µ–Ω–∏
@dp.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
async def start_name_change(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è (–æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(Settings.waiting_for_new_name)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
@dp.message(Settings.waiting_for_new_name)
async def process_new_name(message: types.Message, state: FSMContext):
    new_name = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
    if len(new_name) < 2 or len(new_name) > 50:
        await message.answer("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    user_id = message.from_user.id

    async with aiosqlite.connect("database.db") as db:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.execute(
            "UPDATE users SET name = ? WHERE user_id = ?",
            (new_name, user_id)
        )
        await db.commit()

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        cursor = await db.execute(
            "SELECT name, account_id FROM users WHERE user_id = ?",
            (user_id,)
        )
        updated_user = await cursor.fetchone()

    if updated_user:
        await message.answer(
            f"‚úÖ –í–∞—à–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {updated_user[0]}\n"
            f"–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞: {updated_user[1]}"
        )
    else:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏")

    await state.clear()
    await show_main_menu(message, user_id)


# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é show_main_menu –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
async def show_main_menu(message: types.Message, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    async with aiosqlite.connect("database.db") as db:
        # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
        cursor = await db.execute("""
            SELECT 
                u.name, u.gender, u.city, u.balance, u.account_id,
                u.spouse_id, s.name as spouse_name
            FROM users u
            LEFT JOIN users s ON u.spouse_id = s.account_id
            WHERE u.user_id = ?
            """, (user_id,))
        user = await cursor.fetchone()

    if not user:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        return

    # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    name, gender, city, balance, account_id, spouse_id, spouse_name = user

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –í–°–ï–• –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    profile_info = (
        f"üìï <b>–ü–∞—Å–ø–æ—Ä—Ç {name}</b>\n\n"
        f"üíõ‚îú üÜî <b>–ì–æ—Å ID:</b> <code>{account_id}</code>\n"
        f"üíõ‚îú üë§ <b>–ò–º—è:</b> <code>{name}</code>\n"
        f"ü§ç‚îú üë´ <b>–ü–æ–ª:</b> <code>{'–ú—É–∂—Å–∫–æ–π' if gender == '–º' else '–ñ–µ–Ω—Å–∫–∏–π'}</code>\n"
        f"ü§ç‚îú üíç <b>–°—É–ø—Ä—É–≥(–∞):</b> <code>{spouse_name if spouse_name else '–ù–µ—Ç'}</code>\n"
        f"üíô‚îú üèô <b>–ì–æ—Ä–æ–¥:</b> <code>{city}</code>\n"
        f"üíô‚îî üí≥ <b>–ë–∞–ª–∞–Ω—Å:</b> <code>{balance}</code> —à—É–µ–∫\n"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(profile_info, parse_mode="HTML")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º –Ω–∞–ª–∏—á–∏—è —Å—É–ø—Ä—É–≥–∞
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_kb(spouse_exists=bool(spouse_id)))

# –ü–µ—Ä–µ–≤–æ–¥—ã
@dp.message(F.text == "üí∞ –ù–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥")
async def start_transfer(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ 12-–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
    await state.set_state(Transfer.enter_recipient)


@dp.message(Transfer.enter_recipient)
async def transfer_enter_amount(message: types.Message, state: FSMContext):
    recipient_account = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ 12 —Ü–∏—Ñ—Ä
    if not recipient_account.isdigit() or len(recipient_account) != 12:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 12 —Ü–∏—Ñ—Ä.")
        return

    user_id = message.from_user.id

    async with aiosqlite.connect("database.db") as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        cursor = await db.execute(
            "SELECT 1 FROM users WHERE account_id = ?",
            (recipient_account,)
        )
        recipient_exists = await cursor.fetchone()

        if not recipient_exists:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Å—á–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∏–º —Å–µ–±–µ
        cursor = await db.execute(
            "SELECT account_id FROM users WHERE user_id = ?",
            (user_id,)
        )
        sender_account = (await cursor.fetchone())[0]

        if sender_account == recipient_account:
            await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ —Å–µ–±–µ.")
            return

    await state.update_data(recipient_account=recipient_account)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
    await state.set_state(Transfer.enter_amount)


@dp.message(Transfer.enter_amount)
async def transfer_confirm(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text.strip())
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

    data = await state.get_data()
    recipient_account = data.get("recipient_account")
    user_id = message.from_user.id

    async with aiosqlite.connect("database.db") as db:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
        cursor = await db.execute(
            """SELECT u1.balance, u1.city, u2.city 
               FROM users u1, users u2 
               WHERE u1.user_id = ? AND u2.account_id = ?""",
            (user_id, recipient_account)
        )
        sender_balance, sender_city, recipient_city = await cursor.fetchone()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
        commission = 0 if sender_city.startswith("–§–ì–†") and recipient_city.startswith("–§–ì–†") else 1
        total_amount = amount + commission

        if sender_balance < total_amount:
            await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤:(\n –ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É: {sender_balance} —à—É–µ–∫.")
            await state.clear()
            return

        text = (f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ {amount} —à—É–µ–∫ –Ω–∞ —Å—á–µ—Ç {recipient_account}\n"
                f"–ö–æ–º–∏—Å—Å–∏—è: {commission} —à—É–π–∫–∞\n"
                f"–ò—Ç–æ–≥–æ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ: {total_amount} —à—É–µ–∫\n"
                f"–û—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞: {sender_balance - total_amount} —à—É–µ–∫")

        await state.update_data(
            amount=amount,
            commission=commission,
            total_amount=total_amount,
            recipient_account=recipient_account
        )
        await message.answer(text, reply_markup=confirm_kb())
        await state.set_state(Transfer.confirm)


@dp.message(Transfer.confirm, F.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def execute_transfer(message: types.Message, state: FSMContext):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º user_id
    data = await state.get_data()
    user_id = message.from_user.id
    amount = data['amount']
    commission = data['commission']
    total_amount = data['total_amount']
    recipient_account = data['recipient_account']

    async with aiosqlite.connect("database.db") as db:
        try:
            # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            await db.execute("BEGIN TRANSACTION")

            # –°–ø–∏—Å–∞–Ω–∏–µ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            await db.execute(
                "UPDATE users SET balance = balance - ? WHERE user_id = ? AND balance >= ?",
                (total_amount, user_id, total_amount)
            )

            # –ó–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é (–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏)
            await db.execute(
                "UPDATE users SET balance = balance + ? WHERE account_id = ?",
                (amount, recipient_account)
            )

            # –ó–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–≤–æ–¥–æ–≤
            await db.execute(
                """INSERT INTO transfers (from_user, to_user, amount, commission) 
                   VALUES ((SELECT account_id FROM users WHERE user_id = ?), ?, ?, ?)""",
                (user_id, recipient_account, amount, commission)
            )

            await db.commit()

            await message.answer(
                f"–ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n"
                f"–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: {amount} —à—É–µ–∫\n"
                f"–ö–æ–º–∏—Å—Å–∏—è: {commission} —à—É–π–∫–∞"
            )

        except Exception as e:
            await db.rollback()
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            print(f"Transfer error: {e}")
        finally:
            await state.clear()
            await show_main_menu(message, user_id)

@dp.message(Transfer.confirm, F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_transfer(message: types.Message, state: FSMContext):
    await message.answer("–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.")
    await state.clear()
    await show_main_menu(message, message.from_user.id)



#–∏—Å—Ç–æ—Ä–∏–∏
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ò—Å—Ç–æ—Ä–∏–∏
@dp.message(F.text == "üìÇ –ò—Å—Ç–æ—Ä–∏–∏")
async def open_history_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏—Å—Ç–æ—Ä–∏–∏:", reply_markup=history_menu_kb())

# –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
@dp.message(F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤")
async def transfer_history(message: types.Message):
    user_id = message.from_user.id

    async with aiosqlite.connect("database.db") as db:
        # –ü–æ–ª—É—á–∞–µ–º account_id —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor = await db.execute(
            "SELECT account_id FROM users WHERE user_id = ?",
            (user_id,)
        )
        user_account = await cursor.fetchone()

        if not user_account:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        account_id = user_account[0]

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (–±–µ–∑ LIMIT)
        cursor = await db.execute("""
            SELECT t.amount, t.timestamp, t.to_user, u.name 
            FROM transfers t
            LEFT JOIN users u ON t.to_user = u.account_id
            WHERE t.from_user = ?
            ORDER BY t.timestamp DESC
        """, (account_id,))

        transfers = await cursor.fetchall()

    if not transfers:
        await message.answer("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø—É—Å—Ç–∞")
        return

    # –†–∞–∑–±–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è
    chunk_size = 30  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    chunks = [transfers[i:i + chunk_size] for i in range(0, len(transfers), chunk_size)]

    for chunk_num, chunk in enumerate(chunks, 1):
        response = f"üìú –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (—á–∞—Å—Ç—å {chunk_num}):\n\n"
        for idx, (amount, timestamp, to_account, to_name) in enumerate(chunk, 1):
            recipient = to_name if to_name else f"–ê–∫–∫–∞—É–Ω—Ç {to_account[:4]}...{to_account[-4:]}"
            response += (
                f"{idx}. {timestamp[:16]}\n"
                f"‚Üí {recipient}\n"
                f"–°—É–º–º–∞: {amount} —à—É–µ–∫\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            )

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫—É—Å–æ–∫ –∏ –æ–Ω –ø–æ—á—Ç–∏ –ø–æ–ª–Ω—ã–π - –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º "–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç"
        if chunk_num < len(chunks) or len(chunk) >= chunk_size - 2:
            response += "\n‚¨áÔ∏è –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç..."

        await message.answer(response)

# –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–ª–µ–Ω–∏–π
@dp.message(F.text == "üìÑ –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–ª–µ–Ω–∏–π")
async def statement_history(message: types.Message):
    async with aiosqlite.connect("database.db") as db:
        cursor = await db.execute("SELECT text, timestamp FROM statements WHERE user_id = ?", (message.from_user.id,))
        rows = await cursor.fetchall()
    if not rows:
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–ª–µ–Ω–∏–π –ø—É—Å—Ç–∞.")
    else:
        text = "üìÑ –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–ª–µ–Ω–∏–π:\n"
        for content, timestamp in rows:
            text += f"‚Ä¢ {timestamp}: {content}\n"
        await message.answer(text)
# –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π –∫–æ –≤—Ä–∞—á—É
@dp.message(F.text == "üßë‚Äç‚öï –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π –∫–æ –≤—Ä–∞—á—É")
async def appointment_history(message: types.Message):
    async with aiosqlite.connect("database.db") as db:
        cursor = await db.execute("SELECT doctor, time, timestamp FROM appointments WHERE user_id = ?", (message.from_user.id,))
        rows = await cursor.fetchall()
    if not rows:
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π –ø—É—Å—Ç–∞.")
    else:
        text = "üßë‚Äç‚öï –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π –∫–æ –≤—Ä–∞—á—É:\n"
        for doctor, time, timestamp in rows:
            text += f"‚Ä¢ {doctor} –≤ {time} | {timestamp}\n"
        await message.answer(text)
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –∏–∑ –º–µ–Ω—é –∏—Å—Ç–æ—Ä–∏–∏
@dp.message(F.text == "‚Ü© –ù–∞–∑–∞–¥")
async def back_to_main_from_history(message: types.Message):
    await show_main_menu(message, message.from_user.id)


"""
–ê–î–ú–ò–ò–ò–ò–ò–ò–ò–ù
"""
@dp.message(Command("set_balance"))
async def handle_set_balance_command(message: types.Message, state: FSMContext):
    admin_ids = [6313754974]
    if message.from_user.id not in admin_ids:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á–µ–π –±–∞–ª–∞–Ω—Å –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å:")
    await state.set_state(SetBalance.waiting_for_user_id)

@dp.message(StateFilter(SetBalance.waiting_for_user_id))
async def handle_user_id(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text.strip())
        await state.update_data(user_id=user_id)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:")
        await state.set_state(SetBalance.waiting_for_balance)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@dp.message(StateFilter(SetBalance.waiting_for_balance))
async def handle_new_balance(message: types.Message, state: FSMContext):
    try:
        new_balance = int(message.text.strip())
        data = await state.get_data()
        user_id = data['user_id']
        async with aiosqlite.connect("database.db") as db:
            await db.execute("UPDATE users SET balance = ? WHERE user_id = ?", (new_balance, user_id))
            await db.commit()
        await message.answer(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {new_balance}.")
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞.")
@dp.message(Command("users"))
async def handle_list_users(message: types.Message):
    admin_ids = [6313754974]  # —Å—é–¥–∞ –¥–æ–±–∞–≤—å ID –∞–¥–º–∏–Ω–æ–≤, –∫–æ–º—É —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–æ—Å—Ç—É–ø
    if message.from_user.id not in admin_ids:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    async with aiosqlite.connect("database.db") as db:
        cursor = await db.execute("SELECT user_id, name, balance, city FROM users")
        users = await cursor.fetchall()
    if not users:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    text = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for user_id, name, balance, city in users:
        text += f"ID: {user_id}\n–ò–º—è: {name}\n-----–ë–∞–ª–∞–Ω—Å: {balance}\n-----–ì–æ—Ä–æ–¥: {city}\n\n"
    await message.answer(text)

#—Ä–∞—Å—Å—ã–ª–∫–∞
@dp.message(Command("broadcast"))
async def cmd_broadcast(message: types.Message, state: FSMContext):
    admin_ids = [ADMIN_ID]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π ADMIN_ID
    if message.from_user.id not in admin_ids:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(Broadcast.waiting_for_message)


@dp.message(Broadcast.waiting_for_message)
async def process_broadcast_message(message: types.Message, state: FSMContext):
    await state.update_data(broadcast_message=message.text)
    await message.answer(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n{message.text}",
        reply_markup=confirm_kb()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    )
    await state.set_state(Broadcast.confirm)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message(Broadcast.confirm, F.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def confirm_broadcast(message: types.Message, state: FSMContext):
    data = await state.get_data()
    broadcast_message = data.get("broadcast_message")

    if not broadcast_message:
        await message.answer("–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        await show_main_menu(message, message.from_user.id)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
        return

    await message.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è...", reply_markup=ReplyKeyboardRemove())

    successful = 0
    failed = 0

    async with aiosqlite.connect("database.db") as db:
        cursor = await db.execute("SELECT user_id FROM users")
        users = await cursor.fetchall()

        for (user_id,) in users:
            try:
                await bot.send_message(
                    user_id,
                    f"üì¢ –í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n{broadcast_message}"
                )
                successful += 1
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                failed += 1
            await asyncio.sleep(0.1)

    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
        f"–£—Å–ø–µ—à–Ω–æ: {successful}\n"
        f"–ù–µ —É–¥–∞–ª–æ—Å—å: {failed}"
    )
    await state.clear()
    await show_main_menu(message, message.from_user.id)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message(Broadcast.confirm, F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_broadcast(message: types.Message, state: FSMContext):
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    await state.clear()
    await show_main_menu(message, message.from_user.id)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message(Broadcast.confirm, F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_broadcast(message: types.Message, state: FSMContext):
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()

"""
–î–ï–ü–û–†–¢–†–ê–¢–û–†
"""
@dp.message(Command("deportation"))
async def deport_user(message: types.Message):
    if not message.reply_to_message:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    target_user_id = message.reply_to_message.from_user.id
    deportation_places = [
        "–§–ì–†. –®—É—è",
        "–ü—Å–∏—Ö–æ-–ù–µ–≤—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –î–∏—Å–ø–∞–Ω—Ü–µ—Ä –∏–º–µ–Ω–∏ –ú–∏—Ö–∞–∏–ª–∞ –ë–∞–±—É—à–∫–∏–Ω–∞",
        "–®—É–π—Å–∫–æ-–ë–æ–ª–≤–∞–Ω—Å–∫–∏–π –º–æ—Å—Ç",
        "–ë–æ–ª–≤–∞–Ω–∏—è",
        "–£–ª–∏—Ü–∞",
        "–®–∞—Ö—Ç–∞"
    ]
    new_place = random.choice(deportation_places)

    async with aiosqlite.connect("database.db") as db:
        await db.execute("UPDATE users SET city = ? WHERE user_id = ?", (new_place, target_user_id))
        await db.commit()

    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.full_name} –¥–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω. \n–ù–æ–≤–æ–µ –º–µ—Å—Ç–æ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞ {message.reply_to_message.from_user.full_name} —Ç–µ–ø–µ—Ä—å: {new_place}.")

# –ø–æ–º–æ—â—å
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = """
üÜò <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b> üÜò

/start - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö)
/help - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏ –≥—Ä—É–ø–ø–∞—Ö)
/my_passport - –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –ø–∞—Å–ø–æ—Ä—Ç (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏ –≥—Ä—É–ø–ø–∞—Ö)
/deportation - –¥–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞ —á—å—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏ –≥—Ä—É–ø–ø–∞—Ö)

üìå <i>–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–∏—à–∏—Ç–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–µ (–∫–Ω–æ–ø–∫–∞: "üìù –ù–∞–ø–∏—Å–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ")
    """
    await message.answer(help_text, parse_mode="HTML")
"""


–ø–æ–∫–∞–∑ –ø–∞—Å–ø–æ—Ä—Ç–∞
"""
async def my_passport_get(user_id):
    try:
        async with aiosqlite.connect("database.db") as db:
            cursor = await db.execute("""
                SELECT 
                    u.name, u.gender, u.city, u.balance, u.account_id,
                    u.spouse_id, s.name as spouse_name
                FROM users u
                LEFT JOIN users s ON u.spouse_id = s.account_id
                WHERE u.user_id = ?
                """, (user_id,))
            user = await cursor.fetchone()

            if not user:
                return None  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω

            name, gender, city, balance, account_id, spouse_id, spouse_name = user

            profile_info = (
                f"üìï <b>–ü–∞—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name}</b>\n\n"
                f"üíõ‚îú üÜî <b>–ì–æ—Å ID:</b> <code>{account_id}</code>\n"
                f"üíõ‚îú üë§ <b>–ò–º—è:</b> <code>{name}</code>\n"
                f"ü§ç‚îú üë´ <b>–ü–æ–ª:</b> <code>{'–ú—É–∂—Å–∫–æ–π' if gender == '–º' else '–ñ–µ–Ω—Å–∫–∏–π'}</code>\n"
                f"ü§ç‚îú üíç <b>–°—É–ø—Ä—É–≥(–∞):</b> <code>{spouse_name or '–ù–µ—Ç'}</code>\n"
                f"üíô‚îú üèô <b>–ì–æ—Ä–æ–¥:</b> <code>{city}</code>\n"
                f"üíô‚îî üí≥ <b>–ë–∞–ª–∞–Ω—Å:</b> <code>{balance}</code> —à—É–µ–∫\n"
            )
            return profile_info
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞: {e}")
        return None

#–º–æ–π –ø–∞—Å–ø–æ—Ä—Ç
@dp.message(F.text.in_(["/my_passport", "/mp"]))
async def send_passport(message: types.Message):
    user_id = message.from_user.id
    current_time = datetime.now()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É
    if user_id in last_used:
        last_time = last_used[user_id]
        if current_time - last_time < timedelta(seconds=10):
            remaining = 10 - (current_time - last_time).seconds
            await message.answer(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º!")
            return

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
    last_used[user_id] = current_time
    passport_info = await my_passport_get(user_id)

    if passport_info:
        await message.answer(passport_info, parse_mode="HTML")
    else:
        await message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –ø–∞—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")


async def main():
    await dp.start_polling(bot)



if __name__ == "__main__":
    import asyncio

    async def main():
        await init_db()  # –µ—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        await dp.start_polling(bot)

    asyncio.run(main())
